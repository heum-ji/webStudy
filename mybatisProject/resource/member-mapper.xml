<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="member">
	<!-- parameterType : input // resultType : output -->
	<select id="selectOneMember" parameterType="m" resultType="m"> <!-- Member 객체를 m으로 별칭 지정해서 사용 가능 -->
		select
			member_id as memberId,
			member_pw as memberPw,
			member_name as memberName,
			phone,
			address,
			gender
		from member where member_id = #{ memberId } and member_pw = #{ memberPw }
	</select>
	
	<select id="selectOneMemberId" parameterType="string" resultType="m">
		select
			member_id as memberId,
			member_pw as memberPw,
			member_name as memberName,
			phone,
			address,
			gender
		from member where member_id = #{ memberId }
	</select>
	
	<!-- insert/update/delete 는 resultType이 기본적으로 항상 int / 생략 가능 -->
	<insert id="insertMember" parameterType="m">
		insert into member values(#{memberId}, #{memberPw} , #{memberName}, #{phone}, #{address}, #{gender})
	</insert>
	
	<update id="updateMember" parameterType="m">
		update member set member_pw = #{memberPw}, member_name = #{memberName}, phone = #{phone}, address = #{address}, gender = #{gender} where member_id = #{memberId} 
	</update>
	
	<delete id="deleteMember" parameterType="string">
		delete from member where member_id = #{ memberId }
	</delete>
	
	<select id="selectAllMember" resultType="m">
		select 
			member_id as memberId,
			member_name as memberName,
			phone,
			address,
			gender 
		from member order by member_id
	</select>
	
	<select id="idSearch" parameterType="hashmap" resultType="string">
		select member_id as memberId from member where member_name = #{ memberName } and phone = #{ phone }
	</select>
	
	<select id="pwSearch" parameterType="hashmap" resultType="string">
		select member_pw as memberPw from member where member_id = #{ memberId } and phone = #{ phone }
	</select>
	
	<select id="iftest" parameterType="hashmap" resultType="m">
		select member_id as memberId
		<if test="ckName != null and ckName.equals('on')">
		, member_name as memberName
		</if>
		<if test="ckPhone != null and ckPhone.equals('on')">
			, phone
		</if>
		<if test="ckAddress != null">
			, address
		</if>
		from member
	</select>
	
	<select id="chooseTest" parameterType="hashmap" resultType="m">
		select 
			member_id as memberId,
			member_name as memberName,
			phone,
			address,
			gender 
		from member
		<choose>
			<when test="type.equals('name')">
				where member_name like '%' || #{ keyword } || '%'
			</when>
			<when test="type.equals('id')">
				where member_id = #{ keyword }
			</when>
		</choose>
	</select>
	
	<select id="searchTest" parameterType="hashmap" resultType="m">
		select 
			member_id as memberId,
			member_name as memberName,
			phone,
			address,
			gender 
		from member
		<!-- where 항상 붙이고 시작 + where 다음 and | or 지우기 -->
		<trim prefix="where" prefixOverrides="and|or">
			<if test="!name.equals('')">
				member_name like '%' || #{ name } || '%'
			</if>
			<if test="!address.equals('')">
				and address like '%' || #{ address } || '%'
			</if>
		</trim>
	</select>
	
	<select id="foreachTest" parameterType="hashmap" resultType="m">
		select 
			member_id as memberId,
			member_name as memberName,
			phone,
			address,
			gender 
		from member where member_name in
		<foreach collection="array" item="memberName" open="(" close=")" separator=",">
			#{ memberName }
		</foreach>
	</select>
	
</mapper>